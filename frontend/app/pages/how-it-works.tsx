"use client";

import React from "react";
import Head from "next/head";

export default function HowItWorks() {
  return (
    <>
      <Head>
        <title>How it works - StealthNote</title>
      </Head>
      <div className="intro">
        <h1 className="intro-title">How It Works</h1>

        <p>
          StealthNote is an application for people in an organization to
          anonymously broadcast messages. Here is how it works briefly:
        </p>

        <h3>Sign in with Google</h3>
        <p>
          StealthNote only works for organizations that use Google Workspace.
          When you sign in with Google, Google returns a piece of data called
          {"  "}
          <a
            href="https://en.wikipedia.org/wiki/JSON_Web_Token"
            target="_blank"
            rel="noopener noreferrer"
          >
            JWT
          </a>
          , which contains some information about your account, and a signature
          from Google.
          <p></p>
          Here is an example of what the data in the JWT token looks like:
          <code>
            {`
  headers: {};
  payload: {
    name: "Saleel P",
    hd: "aztecprotocol.com",          // domain name of the company
    email: "sa@aztecprotocol.com",
    email_verified: true,
    nonce: "a27702e8318d0eea0731caeaa7873507",
    iss: "https://accounts.google.com",
    iat: 1726663035,
    exp: 1726666635,
    ...
  }
  signature: V7QYQ98PqoeoE89uwmueaKxEGh8Ed...
          `}
          </code>
        </p>
        <p>
          The signature portion at the end is a{" "}
          <a
            href="https://en.wikipedia.org/wiki/Digital_signature"
            target="_blank"
            rel="noopener noreferrer"
          >
            digital signature
          </a>{" "}
          from Google attesting to the payload data. This signature can only be
          generated by Google&apos;s private key.
        </p>

        <p className="highlight">
          Anyone with the above data and signature can verify the authenticity
          of the data using Google&apos;s public key.
        </p>

        <h3>Signing arbitrary messages</h3>
        <p>
          We can send a random value called{" "}
          <span className="inline-code">nonce</span> to Google during the sign
          in process, and Google will include that in the signed JWT token
          payload.
        </p>
        <p>
          This way we can have Google sign to arbitrary information along with
          your account details. In our case, we set nonce as{" "}
          <a
            href="https://www.geeksforgeeks.org/what-is-hashing/"
            target="_blank"
            rel="noopener noreferrer"
          >
            hash
          </a>{" "}
          of user&apos;s message.
        </p>
        <p className="highlight">
          Now, anyone with your message and JWT token can verify that the
          message was created by some who owns the Google account.
        </p>

        <h3>Zero Knowledge Proof</h3>
        <p>
          Verifying authenticity of the account and message like above requires
          you to share the full JWT data (including name and email) with the
          verifier. Of course, this is not what we want. We want to hide your
          personal information, and yet convince someone you are part of the
          organization, and message was sent by you (someone in the
          organization). For this we use{" "}
          <a
            href="https://www.youtube.com/watch?v=fOGdb1CTu5c"
            target="_blank"
            rel="noopener noreferrer"
          >
            Zero Knowledge Proofs
          </a>
          .
        </p>
        <p>
          Using ZK circuits, you can prove that you have run a program
          correctly, without revealing the input to the program - or only
          revealing some parts of the input. Note that the ZK circuit
          (program/code) itself is not private.
        </p>
        <p>
          Anyone can verify the ZK proof along with the &quot;public inputs&quot; to
          convince themselves that you have run the program correctly with valid
          inputs.
        </p>
        <p>
          For StealthNote, we have built a ZK circuit that verifies the digital
          signature of the JWT and only reveals the company domain (hd field in
          the JWT token) and the nonce (hash of the message).
        </p>
        <p className="highlight">
          Now, anyone with the message, domain and the ZK proof can now verify
          the message was created by someone with a Google account with the
          given domain.
        </p>

        <h3>Message storage</h3>
        <p>
          When a message is submitted, user will be asked to Sign in with Google
          (using the message hash as nonce), and a ZK proof will be generated.
          This entire process happens in the browser and no data leaves the
          browser.
        </p>
        <p>
          Once proof is generated, the message and proof is sent to a server,
          which verified the proof and stores the message in a database. The
          server never learns anything about the user.
        </p>
        <p>
          Note that server cannot alter any message, as the ZK proof for that
          message would be invalid then. However, the server can censor/delete
          some messages.
        </p>
        <p>
          We can prevent that by using a blockchain - i.e. user sends the
          messages + proof to a smart contract, which verifies the proof and
          stores the message.
        </p>
        <p>
          However, using a blockchain will be expensive, and for our simple/fun
          use case, we are simply going to trust the server for non-censorship
          (note that we still dont have to trust the server on privacy or
          message tampering).
        </p>

        <hr />

        {/* <h3>Building ZK apps</h3>
        <p>
          ZK circuits of StealthNote are written using{" "}
          <a
            href="https://github.com/noir-lang/noir"
            target="_blank"
            rel="noopener noreferrer"
          >
            Noir
          </a>{" "}
          - a &ldquo;programming language&rdquo; for writing ZK circuits. It is
          relatively easy to learn and you can build similar ZK applications
          with Noir.
        </p> */}

        <br />
        <br />
      </div>
    </>
  );
}

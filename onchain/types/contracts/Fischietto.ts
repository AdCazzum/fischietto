/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type InEuint256Struct = { data: BytesLike };

export type InEuint256StructOutput = [data: string] & { data: string };

export declare namespace Fischietto {
  export type EncryptedMessageStruct = {
    part1: BigNumberish;
    part2: BigNumberish;
    part3: BigNumberish;
    part4: BigNumberish;
  };

  export type EncryptedMessageStructOutput = [
    part1: bigint,
    part2: bigint,
    part3: bigint,
    part4: bigint
  ] & { part1: bigint; part2: bigint; part3: bigint; part4: bigint };
}

export interface FischiettoInterface extends Interface {
  getFunction(
    nameOrSignature: "getMessage" | "reports" | "whistle"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getMessage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reports",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whistle",
    values: [
      BigNumberish,
      [InEuint256Struct, InEuint256Struct, InEuint256Struct, InEuint256Struct],
      BigNumberish,
      string,
      string,
      string
    ]
  ): string;

  decodeFunctionResult(functionFragment: "getMessage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reports", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whistle", data: BytesLike): Result;
}

export interface Fischietto extends BaseContract {
  connect(runner?: ContractRunner | null): Fischietto;
  waitForDeployment(): Promise<this>;

  interface: FischiettoInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getMessage: TypedContractMethod<
    [id: BigNumberish],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;

  reports: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        Fischietto.EncryptedMessageStructOutput,
        bigint,
        string,
        string,
        string
      ] & {
        eMessage: Fischietto.EncryptedMessageStructOutput;
        timestamp: bigint;
        company: string;
        proof: string;
        kid: string;
      }
    ],
    "view"
  >;

  whistle: TypedContractMethod<
    [
      _id: BigNumberish,
      _eMessage: [
        InEuint256Struct,
        InEuint256Struct,
        InEuint256Struct,
        InEuint256Struct
      ],
      _timestamp: BigNumberish,
      _company: string,
      _proof: string,
      _kid: string
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getMessage"
  ): TypedContractMethod<
    [id: BigNumberish],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "reports"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        Fischietto.EncryptedMessageStructOutput,
        bigint,
        string,
        string,
        string
      ] & {
        eMessage: Fischietto.EncryptedMessageStructOutput;
        timestamp: bigint;
        company: string;
        proof: string;
        kid: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "whistle"
  ): TypedContractMethod<
    [
      _id: BigNumberish,
      _eMessage: [
        InEuint256Struct,
        InEuint256Struct,
        InEuint256Struct,
        InEuint256Struct
      ],
      _timestamp: BigNumberish,
      _company: string,
      _proof: string,
      _kid: string
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
